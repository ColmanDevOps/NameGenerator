- name: Create infra on aws
  hosts: localhost
  connection: local
  gather_facts: False
  vars_files:
    - group_vars/env
  vars:
      ansible_python_interpreter: /usr/bin/python3

  tasks:
  - name: create VPC
    ec2_vpc_net:
      name: "{{ vpc_name }}"
      cidr_block: "{{ network }}"
      region: "{{ aws_region }}"
      state: present
      dns_hostnames: yes
      dns_support: yes
      multi_ok: no
      tags:
        Name: "{{ vpc_name }}"
    register: vpc

  - name: Add VPC definition to vars file
    lineinfile:
      path: group_vars/colman.env
      regexp: 'vpc_id: '
      line: 'vpc_id: {{ vpc.vpc.id }}'
      state: present
      create: True

  - name: associate subnet to the VPC
    ec2_vpc_subnet:
      state: present
      vpc_id: "{{ vpc.vpc.id }}"
      region: "{{ aws_region }}"
      cidr: "{{ subnet_cidr }}"
      map_public: yes
      az: "{{ subnet }}"
      resource_tags:
        Name: "{{ vpc_name }}"
      wait: yes
    register: subnet

  - name: Add subnet definition to vars file
    lineinfile:
      path: group_vars/colman.env
      regexp: 'subnet_id: '
      line: 'subnet_id: {{ subnet.subnet.id }}'
      state: present
      create: True

  - name: create IGW
    ec2_vpc_igw:
      vpc_id: "{{ vpc.vpc.id }}"
      region: "{{ aws_region }}"
      state: present
      tags:
        Name: "{{ vpc_name }}_igw"
    register: igw
  
  - name: Add IGW definition to vars file
    lineinfile:
      path: group_vars/colman.env
      regexp: 'igw_id: '
      line: 'igw_id: {{ igw.gateway_id}}'
      state: present
      create: True

  - name: Route table for public Subnet
    ec2_vpc_route_table:
      vpc_id: "{{ vpc.vpc.id }}"
      region: "{{ aws_region }}"
      state: present
      subnets:
        - "{{ subnet.subnet.id }}"
      routes:
        - dest: 0.0.0.0/0
          gateway_id: "{{ igw.gateway_id  }}"
      tags:
        Name: "{{ vpc_name }}_public_rt"

  - name: Create security group
    ec2_group:
      name: "{{ vpc_name }} VPC SG"
      description: "{{ vpc_name }} VPC SG"
      vpc_id: "{{ vpc.vpc.id }}"
      region: "{{ aws_region }}"
      state: present
      rules:
        - proto: tcp
          ports:
          - 80
          - 22
          cidr_ip: 0.0.0.0/0
    register: sg

  - name: Add sg definition to vars file
    lineinfile:
      path: group_vars/colman.env
      regexp: 'sg_id: '
      line: 'sg_id: {{ sg.group_id }}'
      state: present
      create: True

  - name: Create EC2 instance
    ec2:
      image: "{{ aws_centos_ami }}"
      wait: yes
      instance_type: "{{ Server_type }}"
      region: "{{ aws_region }}"
      group_id: "{{ sg.group_id }}"
      vpc_subnet_id: "{{ subnet.subnet.id }}"
      key_name: "{{ keypair }}"
      volumes:
        - device_name: /dev/sda1
          volume_type: gp3
          volume_size: "{{ server_volume_size }}"
          delete_on_termination: true
      count_tag:
        Name: "{{ server_name }}"
        Environment: "{{ env }}"
      exact_count: 1
      instance_tags:
        Name: "{{ server_name }}"
        Environment: "{{ env }}"
      wait_timeout: 300
      assign_public_ip: yes
    register: server_ec2
  
  - name: Add server public IP to application host group
    add_host: hostname={{ server_ec2.tagged_instances[0].public_ip }} groups=app

  - name: Add Public IP definition to vars file
    lineinfile:
      path: group_vars/colman.env
      regexp: 'server_id: '
      line: 'server_id: {{ server_ec2.tagged_instances[0].id }}'
      state: present
      create: True

  - name: Wait for SSH to start using external IP
    wait_for:
      host: "{{ server_ec2.tagged_instances[0].public_ip }}"
      port: 22
      timeout: 300

##############################################################
- name: Setup web server
  hosts: app
  user: centos
  become: True
  gather_facts: True
  vars_files:
    - group_vars/env
    - group_vars/colman.env
    - group_vars/docker.env
  tasks:
    - name: install epel-release package
      yum: 
        name: 
          - epel-release
        state: present

    - name: install git, python-pip, yum-utils
      yum: 
        name: 
          - git
          - python-pip
          - yum-utils
        state: present
        
    - name: add docker-ce repo.
      shell: "yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo"

    - name: Install Docker
      ansible.builtin.yum:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-compose
        state: present
        update_cache: true

    - name: Start Docker
      ansible.builtin.service:
        name: docker
        enabled: true
        state: restarted

    - name: Copy ssh key
      copy:
        src: ~/.ssh/id_rsa
        dest: ~/.ssh/id_rsa
        mode: '0600'
        
    - name: Clone my app repo
      git:
        repo: git@github.com:ColmanDevOps/NameGenerator.git
        dest: /usr/app
        version: main
        key_file: ~/.ssh/id_rsa
        accept_hostkey: yes
        force: yes

    - name: Build docker image and push to DockerHub
      shell: "{{ item }}"
      args:
        chdir: /usr/app
      with_items:
            - docker login -u {{ docker_user }} -p {{ docker_token }}
            - docker build . --tag {{ docker_user }}/name_gen:latest
            - docker push {{ docker_user }}/name_gen:latest

    - name: Start docker app
      shell: docker-compose up -d
      args:
        chdir: /usr/app